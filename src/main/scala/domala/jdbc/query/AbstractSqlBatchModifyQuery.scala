package domala.jdbc.query

import java.lang.reflect.Method

import org.seasar.doma.internal.jdbc.entity._
import org.seasar.doma.internal.jdbc.sql.SqlContext
import org.seasar.doma.internal.jdbc.sql.node.{ExpandNode, PopulateNode}
import org.seasar.doma.internal.util.AssertionUtil
import org.seasar.doma.internal.util.AssertionUtil.assertNotNull
import org.seasar.doma.jdbc._
import org.seasar.doma.jdbc.entity.EntityType
import org.seasar.doma.jdbc.query.{AbstractQuery, BatchModifyQuery}

abstract class AbstractSqlBatchModifyQuery[ELEMENT](
  protected val elementClass: Class[ELEMENT],
  protected val kind: SqlKind) extends AbstractQuery with BatchModifyQuery {
  protected val EMPTY_STRINGS = new Array[String](0)
  protected var parameterName: String = _

  protected var optimisticLockCheckRequired: Boolean = false
  private var executable = false
  private var sqlExecutionSkipCause = SqlExecutionSkipCause.BATCH_TARGET_NONEXISTENT
  protected var batchSize: Int = 0
  protected var sqlLogType: SqlLogType = _
  protected var includedPropertyNames: Array[String] = EMPTY_STRINGS
  protected var excludedPropertyNames: Array[String] = EMPTY_STRINGS
  protected var elements: java.util.List[ELEMENT] = _
  protected var currentEntity: ELEMENT = _
  protected var sqls: java.util.List[PreparedSql] = _

  AssertionUtil.assertNotNull(kind, "")

  override def prepare(): Unit = {
    super.prepare()
    AssertionUtil.assertNotNull(method, parameterName, elements, sqls, "", "")
  }

  protected def prepareOptions(): Unit = {
    if (this.queryTimeout <= 0) this.queryTimeout = this.config.getQueryTimeout
    if (this.batchSize <= 0) this.batchSize = this.config.getBatchSize
  }


  protected def expandColumns(node: ExpandNode): java.util.List[String] = throw new UnsupportedOperationException

  protected def populateValues(node: PopulateNode, context: SqlContext): Unit = throw new UnsupportedOperationException

  def setParameterName(parameterName: String): Unit = {
    this.parameterName = parameterName
  }

  import java.util

  import org.seasar.doma.jdbc.PreparedSql

  def setElements(elements: Iterable[ELEMENT]): Unit = {
    AssertionUtil.assertNotNull(elements, "")
    if (elements.isInstanceOf[util.Collection[_]]) this.elements = new java.util.ArrayList[ELEMENT](elements.asInstanceOf[java.util.Collection[ELEMENT]])
    else {
      this.elements = new java.util.ArrayList[ELEMENT]
      for (element <- elements) {
        this.elements.add(element)
      }
    }
    this.sqls = new java.util.ArrayList[PreparedSql](this.elements.size)
  }

  def getEntities: java.util.List[ELEMENT] = elements

  def setBatchSize(batchSize: Int): Unit = {
    this.batchSize = batchSize
  }

  def setSqlLogType(sqlLogType: SqlLogType): Unit = {
    this.sqlLogType = sqlLogType
  }

  def setIncludedPropertyNames(includedPropertyNames: String*): Unit = {
    this.includedPropertyNames = includedPropertyNames.toArray
  }

  def setExcludedPropertyNames(excludedPropertyNames: String*): Unit = {
    this.excludedPropertyNames = excludedPropertyNames.toArray
  }

  override def getSql: PreparedSql = this.sqls.get(0)

  override def getSqls: java.util.List[PreparedSql] = this.sqls

  override def getConfig: Config = this.config

  override def isOptimisticLockCheckRequired: Boolean = this.optimisticLockCheckRequired

  override def isAutoGeneratedKeysSupported: Boolean = false

  override def isExecutable: Boolean = executable

  override def getSqlExecutionSkipCause: SqlExecutionSkipCause = this.sqlExecutionSkipCause

  override def getBatchSize: Int = batchSize

  override def getSqlLogType: SqlLogType = this.sqlLogType

  override def toString: String = sqls.toString

  protected def setExecutable(): Unit = {
    this.executable = true
    this.sqlExecutionSkipCause = null
  }

  protected class BatchInsertEntityHandler(var entityType: EntityType[ELEMENT]) {
    assertNotNull(entityType, "")

    def preInsert(): Unit = {
      val context = new SqlBatchPreInsertContext[ELEMENT](entityType, method, config)
      entityType.preInsert(currentEntity, context)
      if (context.getNewEntity != null) currentEntity = context.getNewEntity
    }

    def postInsert(): Unit = {
      val context = new SqlBatchPostInsertContext[ELEMENT](entityType, method, config)
      entityType.postInsert(currentEntity, context)
      if (context.getNewEntity != null) currentEntity = context.getNewEntity
    }
  }

  protected class SqlBatchPreInsertContext[E](entityType: EntityType[E], method: Method, config: Config) extends AbstractPreInsertContext[E](entityType, method, config) {}

  protected class SqlBatchPostInsertContext[E](entityType: EntityType[E], method: Method, config: Config) extends AbstractPostInsertContext[E](entityType, method, config) {}

  protected class BatchUpdateEntityHandler(
    entityType: EntityType[ELEMENT],
    versionIgnored: Boolean,
    optimisticLockExceptionSuppressed: Boolean) {
    import org.seasar.doma.jdbc.entity.EntityPropertyType
    import org.seasar.doma.jdbc.query.BatchUpdateQueryHelper

    assertNotNull(entityType, "")

    private val versionPropertyType = entityType.getVersionPropertyType
    protected var targetPropertyTypes: java.util.List[EntityPropertyType[ELEMENT, _]] = _
    protected var helper: BatchUpdateQueryHelper[ELEMENT] = _

    def init(): Unit = {
      helper = new BatchUpdateQueryHelper[ELEMENT](config, entityType, includedPropertyNames, excludedPropertyNames, versionIgnored, optimisticLockExceptionSuppressed)
    }

    def preUpdate(): Unit = {
      val context = new SqlBatchPreUpdateContext[ELEMENT](entityType, method, config)
      entityType.preUpdate(currentEntity, context)
      if (context.getNewEntity != null) currentEntity = context.getNewEntity
    }

    def prepareTargetPropertyTypes(): Unit = {
      targetPropertyTypes = helper.getTargetPropertyTypes
    }

    def postUpdate(): Unit = {
      val context = new SqlBatchPostUpdateContext[ELEMENT](entityType, method, config)
      entityType.postUpdate(currentEntity, context)
      if (context.getNewEntity != null) currentEntity = context.getNewEntity
    }

    import org.seasar.doma.internal.jdbc.sql.SqlContext

    def prepareOptimisticLock(): Unit = {
      if (versionPropertyType != null && !versionIgnored) if (!optimisticLockExceptionSuppressed) optimisticLockCheckRequired = true
    }

    def incrementVersions(): Unit = {
      if (versionPropertyType != null && !versionIgnored) {
        val it = elements.listIterator
        while ( {it.hasNext}) {
          val newEntity = versionPropertyType.increment(entityType, it.next)
          it.set(newEntity)
        }
      }
    }

    def populateValues(context: SqlContext): Unit = {
      helper.populateValues(currentEntity, targetPropertyTypes, versionPropertyType, context)
    }
  }

  protected class SqlBatchPreUpdateContext[E](entityType: EntityType[E], method: Method, config: Config) extends AbstractPreUpdateContext[E](entityType, method, config) {
    override def isEntityChanged: Boolean = true
    override def isPropertyChanged(propertyName: String): Boolean = {
      validatePropertyDefined(propertyName)
      true
    }
  }

  protected class SqlBatchPostUpdateContext[E](entityType: EntityType[E], method: Method, config: Config) extends AbstractPostUpdateContext[E](entityType, method, config) {
    override def isPropertyChanged(propertyName: String): Boolean = {
      validatePropertyDefined(propertyName)
      true
    }
  }

  protected class BatchDeleteEntityHandler(
    entityType: EntityType[ELEMENT],
    versionIgnored: Boolean,
    optimisticLockExceptionSuppressed: Boolean) {
    assertNotNull(entityType, "")

    private val versionPropertyType = entityType.getVersionPropertyType

    def preDelete(): Unit = {
      val context = new SqlBatchPreDeleteContext[ELEMENT](entityType, method, config)
      entityType.preDelete(currentEntity, context)
      if (context.getNewEntity != null) currentEntity = context.getNewEntity
    }

    def postDelete(): Unit = {
      val context = new SqlBatchPostDeleteContext[ELEMENT](entityType, method, config)
      entityType.postDelete(currentEntity, context)
      if (context.getNewEntity != null) currentEntity = context.getNewEntity
    }

    def prepareOptimisticLock(): Unit = {
      if (versionPropertyType != null && !versionIgnored) if (!optimisticLockExceptionSuppressed) optimisticLockCheckRequired = true
    }
  }

  protected class SqlBatchPreDeleteContext[E](entityType: EntityType[E], method: Method, config: Config) extends AbstractPreDeleteContext[E](entityType, method, config) {}

  protected class SqlBatchPostDeleteContext[E](entityType: EntityType[E], method: Method, config: Config) extends AbstractPostDeleteContext[E](entityType, method, config) {}
}
